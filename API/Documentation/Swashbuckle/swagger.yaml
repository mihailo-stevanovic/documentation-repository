swagger: '2.0'
info:
  version: v1
  title: Doc Repo API
  description: >-
    ASP.NET Core Web API used for publishing and accessing technical
    documentation.
  contact:
    name: Mihailo StevanoviÄ‡
    email: mihailo.stev@gmail.com
paths:
  /api/v1/Authors:
    get:
      tags:
        - Authors
      summary: Returns all authors.
      operationId: ApiV1AuthorsGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Authors successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDto'
        '404':
          description: No authors were found.
    post:
      tags:
        - Authors
      summary: Creates a new author.
      operationId: ApiV1AuthorsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: author
          in: body
          description: New author object.
          required: false
          schema:
            $ref: '#/definitions/AuthorDto'
      responses:
        '201':
          description: Returns the newly created author.
          schema:
            $ref: '#/definitions/AuthorDto'
        '400':
          description: Invalid request.
  /api/v1/Authors/Active:
    get:
      tags:
        - Authors
      summary: Returns all active authors. Former authors are excluded.
      operationId: ApiV1AuthorsActiveGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Authors successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDto'
        '404':
          description: No active authors were found.
  '/api/v1/Authors/{id}':
    get:
      tags:
        - Authors
      summary: Returns a single author.
      operationId: ApiV1AuthorsByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the author.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Author successfully returned.
          schema:
            $ref: '#/definitions/AuthorDto'
        '400':
          description: Invalid request.
        '404':
          description: Author with a matching ID could not be found.
    put:
      tags:
        - Authors
      summary: Updates an author.
      operationId: ApiV1AuthorsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: id
          in: path
          description: ID of the author.
          required: true
          type: integer
          format: int32
        - name: author
          in: body
          description: Updated author.
          required: false
          schema:
            $ref: '#/definitions/AuthorDto'
      responses:
        '204':
          description: Update is successuful.
        '400':
          description: >-
            Request is incorrect or ID from the path does not match the ID of
            the author.
        '404':
          description: Author does not exist.
    delete:
      tags:
        - Authors
      summary: Deletes an author.
      operationId: ApiV1AuthorsByIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the author to be deleted.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Author sucessufully deleted.
          schema:
            $ref: '#/definitions/AuthorDto'
        '400':
          description: Invalid request.
        '404':
          description: Author with the provided ID could not be found.
  /api/v1/Authors/Batch:
    post:
      tags:
        - Authors
      summary: Creates multiple authors.
      operationId: ApiV1AuthorsBatchPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: AuthorList
          in: body
          description: List of authors.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDto'
      responses:
        '201':
          description: Action is successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorDto'
        '400':
          description: Invalid request.
  /api/v1/ClientCatalogs:
    get:
      tags:
        - ClientCatalogs
      summary: Returns all client catalogs.
      operationId: ApiV1ClientCatalogsGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Catalogs successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientCatalogDto'
        '404':
          description: No catalogs were found.
    post:
      tags:
        - ClientCatalogs
      summary: Creates a new client catalog.
      operationId: ApiV1ClientCatalogsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: clientCatalog
          in: body
          description: Client catalog object.
          required: false
          schema:
            $ref: '#/definitions/ClientCatalogDto'
      responses:
        '201':
          description: Returns the newly created author.
          schema:
            $ref: '#/definitions/ClientCatalogDto'
        '400':
          description: Invalid request.
  '/api/v1/ClientCatalogs/{id}':
    get:
      tags:
        - ClientCatalogs
      summary: Returns a single client catalog.
      operationId: ApiV1ClientCatalogsByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the client catalog.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Catalog successfully returned.
          schema:
            $ref: '#/definitions/ClientCatalogDto'
        '400':
          description: Invalid request.
        '404':
          description: Catalog with a matching ID could not be found.
    put:
      tags:
        - ClientCatalogs
      summary: Updates an existing client catalog.
      operationId: ApiV1ClientCatalogsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: id
          in: path
          description: ID of the client catalog.
          required: true
          type: integer
          format: int32
        - name: clientCatalog
          in: body
          description: Client catalog object.
          required: false
          schema:
            $ref: '#/definitions/ClientCatalogDto'
      responses:
        '204':
          description: Update is successuful.
        '400':
          description: >-
            Request is incorrect or ID from the path does not match the ID of
            the author.
        '404':
          description: Author does not exist.
    delete:
      tags:
        - ClientCatalogs
      summary: Deletes a client catalog.
      operationId: ApiV1ClientCatalogsByIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the client catalog.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: client catalog sucessufully deleted.
          schema:
            $ref: '#/definitions/ClientCatalogDto'
        '400':
          description: Invalid request.
        '404':
          description: Client catalog with the provided ID could not be found.
  /api/v1/ClientCatalogs/Batch:
    post:
      tags:
        - ClientCatalogs
      summary: Creates multiple client catalogs.
      operationId: ApiV1ClientCatalogsBatchPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: clientCatalogList
          in: body
          description: List of client catalog objects.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientCatalogDto'
      responses:
        '201':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientCatalogDto'
        '204':
          description: Action is successful.
        '400':
          description: Invalid request.
  /api/v1/Documents:
    get:
      tags:
        - Documents
      summary: Returns all documents.
      operationId: ApiV1DocumentsGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Documents successfully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDto'
        '404':
          description: No documents found.
    post:
      tags:
        - Documents
      summary: Creates a document.
      operationId: ApiV1DocumentsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: document
          in: body
          description: New document object.
          required: false
          schema:
            $ref: '#/definitions/DocumentDto'
      responses:
        '201':
          description: Document properly created.
          schema:
            $ref: '#/definitions/DocumentDto'
        '400':
          description: Invalid request.
  '/api/v1/Documents/{id}':
    get:
      tags:
        - Documents
      summary: Returns a single document.
      operationId: ApiV1DocumentsByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document successfully returned.
          schema:
            $ref: '#/definitions/DocumentDto'
        '400':
          description: Invalid request.
        '404':
          description: Document with a matching ID could not be found.
    put:
      tags:
        - Documents
      summary: Updates a document.
      operationId: ApiV1DocumentsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: id
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
        - name: document
          in: body
          description: Modified document object.
          required: false
          schema:
            $ref: '#/definitions/DocumentDto'
      responses:
        '204':
          description: Document successufully updated.
        '400':
          description: Invalid request.
        '404':
          description: Document with a matching ID could not be found.
    delete:
      tags:
        - Documents
      summary: Deletes a document.
      operationId: ApiV1DocumentsByIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document sucessfully deleted.
          schema:
            $ref: '#/definitions/DocumentDto'
        '400':
          description: Invalid request.
        '404':
          description: Document with the provided ID could not be found.
  '/api/v1/Documents/{documentId}/Updates':
    get:
      tags:
        - Documents
      summary: Returns all updates related to a document.
      operationId: ApiV1DocumentsByDocumentIdUpdatesGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: documentId
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document updates successfully returned returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentUpdateDto'
        '400':
          description: Invalid request.
        '404':
          description: Updates for a document with the specified ID could not be found.
    post:
      tags:
        - Documents
      summary: Creates a document update.
      operationId: ApiV1DocumentsByDocumentIdUpdatesPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: documentId
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
        - name: documentUpdate
          in: body
          description: New document update object.
          required: false
          schema:
            $ref: '#/definitions/DocumentUpdateDto'
      responses:
        '201':
          description: Document update properly created.
          schema:
            $ref: '#/definitions/DocumentUpdateDto'
        '400':
          description: Invalid request.
  '/api/v1/Documents/{documentId}/Updates/{updateId}':
    get:
      tags:
        - Documents
      summary: Returns a single update related to a document.
      operationId: ApiV1DocumentsByDocumentIdUpdatesByUpdateIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: documentId
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
        - name: updateId
          in: path
          description: ID of the update.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document update successfully returned returned.
          schema:
            $ref: '#/definitions/DocumentUpdateDto'
        '400':
          description: Invalid request.
        '404':
          description: Update with a matching ID and DocumentID could not be found.
    put:
      tags:
        - Documents
      summary: Updates a document update.
      description: >-
        Please note that usage of this action is not recommended. It is provided
        to support specific cases.
      operationId: ApiV1DocumentsByDocumentIdUpdatesByUpdateIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: documentId
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
        - name: updateId
          in: path
          description: ID of the document update.
          required: true
          type: integer
          format: int32
        - name: documentUpdate
          in: body
          description: Modified document object.
          required: false
          schema:
            $ref: '#/definitions/DocumentUpdateDto'
      responses:
        '204':
          description: Document update successufully modified.
        '400':
          description: Invalid request.
        '404':
          description: Document update with a matching ID could not be found.
    delete:
      tags:
        - Documents
      summary: Deletes a document update.
      operationId: ApiV1DocumentsByDocumentIdUpdatesByUpdateIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: documentId
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
        - name: updateId
          in: path
          description: ID of the document update.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document update sucessfully deleted.
          schema:
            $ref: '#/definitions/DocumentUpdateDto'
        '400':
          description: Invalid request.
        '404':
          description: >-
            Document update with the provided ID and DocumentID could not be
            found.
  /api/v1/Documents/Batch:
    post:
      tags:
        - Documents
      summary: Creates multiple documents.
      operationId: ApiV1DocumentsBatchPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: documentList
          in: body
          description: List of new document objects.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDto'
      responses:
        '201':
          description: Documents created sucessfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDto'
        '400':
          description: Invalid request.
  /api/v1/DocumentsInternal:
    get:
      tags:
        - DocumentsInternal
      summary: Returns a list of published documents.
      operationId: ApiV1DocumentsInternalGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: Number of documents to retreive. Used for pagination. Default is 20.
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: Index of the page to display starting with 1. Default is 1.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Documents successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: No documents found.
  '/api/v1/DocumentsInternal/{id}':
    get:
      tags:
        - DocumentsInternal
      summary: Returns a single published document.
      operationId: ApiV1DocumentsInternalByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document successfully found.
          schema:
            $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: Document with the provided ID could not be found.
  '/api/v1/DocumentsInternal/ByDocType/{docTypeId}':
    get:
      tags:
        - DocumentsInternal
      summary: Returns a list of published documents of a specified document type.
      operationId: ApiV1DocumentsInternalByDocTypeByDocTypeIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: docTypeId
          in: path
          description: ID of the document type.
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: Number of documents to retreive. Used for pagination. Default is 20.
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: Index of the page to display starting with 1. Default is 1.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Documents successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: No documents of the specified type could be found.
  '/api/v1/DocumentsInternal/ByProduct/{productId}':
    get:
      tags:
        - DocumentsInternal
      summary: Returns a list of published documents of a specified product.
      operationId: ApiV1DocumentsInternalByProductByProductIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: Number of documents to retreive. Used for pagination. Default is 20.
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: Index of the page to display starting with 1. Default is 1.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Documents successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: No documents could be found for the specified product.
  '/api/v1/DocumentsInternal/ByProductVersion/{productVersionId}':
    get:
      tags:
        - DocumentsInternal
      summary: Returns a list of published documents of a specified product.
      operationId: ApiV1DocumentsInternalByProductVersionByProductVersionIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: productVersionId
          in: path
          description: ID of the product version.
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: Number of documents to retreive. Used for pagination. Default is 20.
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: Index of the page to display starting with 1. Default is 1.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Documents successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: No documents could be found for the specified product version.
  /api/v1/DocumentsInternal/Search:
    get:
      tags:
        - DocumentsInternal
      summary: >-
        Returns a list of published documents by searching the title, short
        description and latest updates.
      operationId: ApiV1DocumentsInternalSearchGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: searchTerm
          in: query
          description: Terms used to search for the documents.
          required: false
          type: string
        - name: limit
          in: query
          description: Number of documents to retreive. Used for pagination. Default is 20.
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: Index of the page to display starting with 1. Default is 1.
          required: true
          type: integer
          format: int32
        - name: exactMatch
          in: query
          description: >-
            When set to false, each word in the search term is searched for
            separately. Otherwise, the search term is used as a whole. Default
            is true.
          required: true
          type: boolean
      responses:
        '200':
          description: Documents successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentDtoInternal'
        '400':
          description: Invalid request.
        '404':
          description: No documents could be found for the specified product.
  '/api/v1/DocumentsInternal/{id}/Updates':
    get:
      tags:
        - DocumentsInternal
      summary: Returns all published updates of a specified document.
      operationId: ApiV1DocumentsInternalByIdUpdatesGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document updates successufully returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentUpdateDto'
        '400':
          description: Invalid request.
        '404':
          description: No updates could be found for the specified document.
  /api/v1/DocumentTypes:
    get:
      tags:
        - DocumentTypes
      summary: Returns all document types.
      operationId: ApiV1DocumentTypesGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Document types successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentTypeDto'
        '404':
          description: No document types were found.
    post:
      tags:
        - DocumentTypes
      summary: Creates a Document Type.
      operationId: ApiV1DocumentTypesPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: documentType
          in: body
          description: Document Type object.
          required: false
          schema:
            $ref: '#/definitions/DocumentTypeDto'
      responses:
        '201':
          description: Returns the newly created document type.
          schema:
            $ref: '#/definitions/DocumentTypeDto'
        '400':
          description: Invalid request.
  '/api/v1/DocumentTypes/{id}':
    get:
      tags:
        - DocumentTypes
      summary: Returns a single document type.
      operationId: ApiV1DocumentTypesByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document type.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document type successfully retrieved.
          schema:
            $ref: '#/definitions/DocumentTypeDto'
        '400':
          description: Invalid request.
        '404':
          description: No document types with the matching ID were found.
    put:
      tags:
        - DocumentTypes
      summary: Updates an existing Document Type.
      operationId: ApiV1DocumentTypesByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: id
          in: path
          description: ID of the Document Type.
          required: true
          type: integer
          format: int32
        - name: documentType
          in: body
          description: Document Type object.
          required: false
          schema:
            $ref: '#/definitions/DocumentTypeDto'
      responses:
        '204':
          description: Update is successuful.
        '400':
          description: >-
            Request is incorrect or ID from the path does not match the ID of
            the document type.
        '404':
          description: Document type does not exist.
    delete:
      tags:
        - DocumentTypes
      summary: Deletes a Document Type.
      operationId: ApiV1DocumentTypesByIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document type object.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Document type sucessufully deleted.
          schema:
            $ref: '#/definitions/DocumentTypeDto'
        '400':
          description: Invalid request.
        '404':
          description: Document type with the provided ID could not be found.
  /api/v1/DocumentTypes/Categories:
    get:
      tags:
        - DocumentTypes
      summary: Returns a list of all document categories as key-value pairs.
      description: "Provided for informational purposes only.\r\nKey: Category ID\r\nValue: Category Name"
      operationId: ApiV1DocumentTypesCategoriesGet
      consumes: []
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/KeyValuePair[Int32,String]'
  /api/v1/Products:
    get:
      tags:
        - Products
      summary: Returns all products.
      operationId: ApiV1ProductsGet
      consumes: []
      produces:
        - application/json
      responses:
        '200':
          description: Products successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductDto'
        '404':
          description: No products were found.
    post:
      tags:
        - Products
      summary: Creates a product.
      operationId: ApiV1ProductsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: product
          in: body
          description: Product object.
          required: false
          schema:
            $ref: '#/definitions/ProductDto'
      responses:
        '201':
          description: Returns the newly created product.
          schema:
            $ref: '#/definitions/ProductDto'
        '400':
          description: Invalid request.
  '/api/v1/Products/{id}':
    get:
      tags:
        - Products
      summary: Returns a single product by ID.
      operationId: ApiV1ProductsByIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Product successfully retrieved.
          schema:
            $ref: '#/definitions/ProductDto'
        '400':
          description: Invalid request.
        '404':
          description: Products with matching ID not found.
    put:
      tags:
        - Products
      summary: Updates a single product.
      operationId: ApiV1ProductsByIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: product
          in: body
          description: Product object.
          required: false
          schema:
            $ref: '#/definitions/ProductDto'
      responses:
        '204':
          description: Update is successuful.
        '400':
          description: >-
            Request is incorrect or ID from the path does not match the ID of
            the product.
        '404':
          description: Product does not exist.
    delete:
      tags:
        - Products
      summary: Deletes a product.
      operationId: ApiV1ProductsByIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Product sucessufully deleted.
          schema:
            $ref: '#/definitions/ProductDto'
        '400':
          description: Invalid request.
        '404':
          description: Product with the provided ID could not be found.
  '/api/v1/Products/{productId}/Versions':
    get:
      tags:
        - Products
      summary: Returns a list of versions associated to a product.
      operationId: ApiV1ProductsByProductIdVersionsGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Product versions successfully retrieved.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductVersionDto'
        '400':
          description: Invalid request.
        '404':
          description: Products versions with matching product ID not found.
    post:
      tags:
        - Products
      summary: Creates a new version of a product.
      operationId: ApiV1ProductsByProductIdVersionsPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: productVersion
          in: body
          description: Product version object.
          required: false
          schema:
            $ref: '#/definitions/ProductVersionDto'
      responses:
        '201':
          description: Returns the newly created product version.
          schema:
            $ref: '#/definitions/ProductVersionDto'
        '400':
          description: Invalid request.
  '/api/v1/Products/{productId}/Versions/{versionId}':
    get:
      tags:
        - Products
      summary: Returns a single version associated to a product.
      operationId: ApiV1ProductsByProductIdVersionsByVersionIdGet
      consumes: []
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: versionId
          in: path
          description: ID of the version.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Product version successfully retrieved.
          schema:
            $ref: '#/definitions/ProductVersionDto'
        '400':
          description: Invalid request.
        '404':
          description: Product versions with matching ID not found.
    put:
      tags:
        - Products
      summary: Updates a version of a product.
      operationId: ApiV1ProductsByProductIdVersionsByVersionIdPut
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces: []
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: versionId
          in: path
          description: ID of the version.
          required: true
          type: integer
          format: int32
        - name: productVersion
          in: body
          description: Product version object.
          required: false
          schema:
            $ref: '#/definitions/ProductVersionDto'
      responses:
        '204':
          description: Update is successuful.
        '400':
          description: >-
            Request is incorrect or ID from the path does not match the ID of
            the product version.
        '404':
          description: Product version does not exist.
    delete:
      tags:
        - Products
      summary: Deletes a product version.
      operationId: ApiV1ProductsByProductIdVersionsByVersionIdDelete
      consumes: []
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: versionId
          in: path
          description: ID of the version.
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Product version sucessufully deleted.
          schema:
            $ref: '#/definitions/ProductVersionDto'
        '400':
          description: Invalid request.
        '404':
          description: Product version with the provided ID could not be found.
  /api/v1/Products/Batch:
    post:
      tags:
        - Products
      summary: Creates multiple products.
      operationId: ApiV1ProductsBatchPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: ProductList
          in: body
          description: List of product objects.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductDto'
      responses:
        '201':
          description: Action is successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductDto'
        '400':
          description: Invalid request.
  '/api/v1/Products/{productId}/Versions/Batch':
    post:
      tags:
        - Products
      summary: Creates multiple product versions.
      operationId: ApiV1ProductsByProductIdVersionsBatchPost
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of the product.
          required: true
          type: integer
          format: int32
        - name: productVersionList
          in: body
          description: List of product version objects.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductVersionDto'
      responses:
        '201':
          description: Action is successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductVersionDto'
        '400':
          description: Invalid request.
definitions:
  AuthorDto:
    description: Represents a DTO class for the Author class.
    required:
      - firstName
      - lastName
      - email
      - alias
    type: object
    properties:
      id:
        format: int32
        description: ID of the author.
        type: integer
      firstName:
        description: First name of the author.
        maxLength: 50
        minLength: 0
        type: string
      lastName:
        description: Last name of the author.
        maxLength: 50
        minLength: 0
        type: string
      email:
        description: Email address of the author.
        type: string
      alias:
        maxLength: 7
        minLength: 0
        type: string
      isFormerAuthor:
        description: Is former employee.
        type: boolean
      aitName:
        description: Author-IT name of the author.
        maxLength: 10
        minLength: 4
        type: string
  ClientCatalogDto:
    required:
      - name
    type: object
    properties:
      id:
        format: int32
        description: ID of the client catalog.
        type: integer
      name:
        description: Name of the client catalog.
        maxLength: 50
        minLength: 0
        type: string
      internalId:
        description: ID used for integration with other internal systems.
        type: string
  DocumentDto:
    description: DTO of the Document class. Used for publishing documents.
    required:
      - title
    type: object
    properties:
      id:
        format: int32
        description: ID of the document.
        type: integer
      title:
        description: Title of the document.
        type: string
      htmlLink:
        description: Relative path to the HTML output of the document.
        type: string
      pdfLink:
        description: Relative path to the PDF output of the document.
        type: string
      wordLink:
        description: Relative path to the Word output of the document.
        type: string
      otherLink:
        description: Relative path to a misc output of the document.
        type: string
      isFitForClients:
        description: Is document available to clients.
        type: boolean
      shortDescription:
        description: Short description of the document.
        type: string
      aitId:
        format: int32
        description: Author-ID ID of the document.
        type: integer
      documentAuthorIds:
        description: List of related author IDs.
        type: array
        items:
          format: int32
          type: integer
      documentCatalogIds:
        description: List of related client catalog IDs.
        type: array
        items:
          format: int32
          type: integer
      latestTopicsUpdated:
        description: List of the latest updated topics.
        type: string
      isPublished:
        description: Used to restrict the visibility of the update during publishing.
        type: boolean
      parentDocumentId:
        format: int32
        description: ID of the parent document.
        type: integer
      productVersionId:
        format: int32
        description: ID of the related product version.
        type: integer
      documentTypeId:
        format: int32
        description: ID of the related document type.
        type: integer
      rowVersion:
        format: byte
        description: Used to prevent DB concurrency issues during updates.
        type: string
  DocumentUpdateDto:
    description: DTO class for the DocumentUpdate class.
    type: object
    properties:
      id:
        format: int32
        description: ID of the document update.
        type: integer
      timestamp:
        format: date-time
        description: Date and time of the update.
        type: string
      latestTopicsUpdated:
        description: List of the latest updated topics.
        type: string
      isPublished:
        description: Used to restrict the visibility of the update during publishing.
        type: boolean
      documentId:
        format: int32
        description: Link to the related document.
        type: integer
      rowVersion:
        format: byte
        description: Used to prevent DB concurrency issues during updates.
        type: string
  DocumentDtoInternal:
    description: Represent a DTO of the Document class used for displaying it internally.
    type: object
    properties:
      id:
        format: int32
        description: ID of the document.
        type: integer
      title:
        description: Title of the document.
        type: string
      product:
        description: Product related to the document.
        type: string
      version:
        description: Product version related to the document.
        type: string
      htmlLink:
        description: Relative path to the HTML output of the document.
        type: string
      pdfLink:
        description: Relative path to the PDF output of the document.
        type: string
      wordLink:
        description: Relative path to the Word output of the document.
        type: string
      otherLink:
        description: Relative path to a misc output of the document.
        type: string
      isFitForClients:
        description: Is document available for clients.
        type: boolean
      shortDescription:
        description: Short description of the document.
        type: string
      documentType:
        description: Document type.
        type: string
      latestUpdate:
        format: date-time
        description: Date of the latest update.
        type: string
      latestTopicsUpdated:
        description: List of the latest updated topics.
        type: string
      authors:
        description: Link to the related authors.
        type: array
        items:
          $ref: '#/definitions/AuthorDto'
      clientCatalogs:
        description: Link to the related client catalogs.
        type: array
        items:
          $ref: '#/definitions/ClientCatalogDto'
  DocumentTypeDto:
    description: Represents a DTO of a DocumentType.
    required:
      - fullName
      - shortName
    type: object
    properties:
      id:
        format: int32
        description: ID of the document type.
        type: integer
      fullName:
        description: Full name of the document type.
        type: string
      shortName:
        description: Short name (code) of the document type.
        maxLength: 5
        minLength: 0
        type: string
      documentCategory:
        format: int32
        description: Category of the document type.
        enum:
          - 0
          - 1
          - 2
          - 3
        type: integer
  'KeyValuePair[Int32,String]':
    type: object
    properties:
      key:
        format: int32
        type: integer
        readOnly: true
      value:
        type: string
        readOnly: true
  ProductDto:
    description: Represents a DTO class of the Product class.
    required:
      - fullName
      - shortName
    type: object
    properties:
      id:
        format: int32
        description: Id of the product.
        type: integer
      fullName:
        description: Marketing name of the product.
        type: string
      shortName:
        description: Short name of the product
        maxLength: 7
        minLength: 0
        type: string
      alias:
        description: Used for old product names.
        minLength: 4
        type: string
  ProductVersionDto:
    description: Represents a DTO class of the ProductVersion class.
    required:
      - release
    type: object
    properties:
      id:
        format: int32
        description: ID of the product version.
        type: integer
      product:
        description: Marketing name of the product.
        type: string
      release:
        description: Release version of the product.
        maxLength: 10
        minLength: 0
        type: string
      endOfSupport:
        format: date-time
        description: End of support date.
        type: string
      isSupported:
        description: True if the version is still supported.
        type: boolean
        readOnly: true
securityDefinitions: {}
security: []
